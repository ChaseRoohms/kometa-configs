run-name: Imported ${{ github.event.client_payload.title }}
name: New Media Added

on:
  repository_dispatch:
    types: [arr-import]

permissions:
  id-token: write
  contents: write

env:
  MOVIE_METADATA_FILE: movie_metadata.yml
  SHOW_METADATA_FILE: show_metadata.yml

jobs:
  movie:
    if: ${{ github.event.client_payload.instanceName == 'Radarr' && !github.event.client_payload.isUpgrade }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4.2.2
      
      - name: New Movie
        run: |
          ls # Debug
          title="${{ github.event.client_payload.movie.title }}"
          encoded_title="$(echo "$title" | sed -e 's/ /+/g' -e 's/&/%26/g')"
          release_year="${{ github.event.client_payload.remoteMovie.year }}"
          tmdb_id=${{ github.event.client_payload.remoteMovie.tmdbId }}
          tpdb_search="https://theposterdb.com/search?term=$encoded_title&section=movies"

          lower_title="${title,,}"  # convert to lowercase for comparison
          sort_title="$title"
          for article in "a " "an " "the "; do
              if [[ "$lower_title" == "$article"* ]]; then
                  sort_title="${title:${#article}}"
                  break
              fi
          done
          
          sort_title=$(echo "$sort_title" | iconv -f UTF-8 -t ASCII//TRANSLIT)
          
          echo $tmdb_id
          echo $title
          echo $release_year
          echo $sort_title
          echo $tpdb_search

          if [[ $(yq '.metadata.${{ github.event.client_payload.remoteMovie.tmdbId }}' ${{ env.MOVIE_METADATA_FILE }}) == null ]]; then
            echo "Movie does not exist, adding"
            yq -i '.metadata += {'"$tmdb_id"': {"label_title": "'"$title"'", "release_year": "'"$release_year"'", "sort_title": "'"$sort_title"'", "url_poster": "", "tpdb_search": "'"$tpdb_search"'"}}' ${{ env.MOVIE_METADATA_FILE }}
            yq -i '.metadata |= (to_entries | sort_by(.value.sort_title) | from_entries)' ${{ env.MOVIE_METADATA_FILE }}
            yq -i '.metadata.${{ github.event.client_payload.remoteMovie.tmdbId }}.release_year style="single"' ${{ env.MOVIE_METADATA_FILE }}
            yq -i '.metadata.${{ github.event.client_payload.remoteMovie.tmdbId }}.url_poster style="single"' ${{ env.MOVIE_METADATA_FILE }}
            yq ${{ env.MOVIE_METADATA_FILE }} # Debug
          fi
      
      - name: Commit Changes to Main
        id: commit-changes
        run: |
          git config --global user.email "kometa@updater.com"
          git config --global user.name "Kometa Updater"
          git add ${{ env.MOVIE_METADATA_FILE }}
          git diff-index --quiet main || git commit -m "Updating movie file" && git push

  show:
    if: ${{ github.event.client_payload.instanceName == 'Sonarr' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4.2.2
    
      - name: test
        run: |
          ls # Debug
          title="${{ github.event.client_payload.series.title }}"
          encoded_title="$(echo "$title" | sed -e 's/ /+/g' -e 's/&/%26/g')"
          release_year="${{ github.event.client_payload.series.year }}"
          tvdb_id=${{ github.event.client_payload.series.tvdbId }}
          tpdb_search="https://theposterdb.com/search?term=$encoded_title&section=shows"

          lower_title="${title,,}"  # convert to lowercase for comparison
          sort_title="$title"
          for article in "a " "an " "the "; do
              if [[ "$lower_title" == "$article"* ]]; then
                  sort_title="${title:${#article}}"
                  break
              fi
          done
          
          sort_title=$(echo "$sort_title" | iconv -f UTF-8 -t ASCII//TRANSLIT)
          
          readarray -t seasons < <(echo '${{ toJson(github.event.client_payload.episodes) }}' | jq '.[].seasonNumber' | sort -u)
          
          echo $tvdb_id
          echo $title
          echo $release_year
          echo $sort_title
          echo $tpdb_search

          yq ${{ env.SHOW_METADATA_FILE }}

          if [[ $(yq '.metadata.${{ github.event.client_payload.series.tvdbId }}' ${{ env.SHOW_METADATA_FILE }}) == null ]]; then
            echo "Show does not exist, adding"
            yq -i '.metadata += {'"$tvdb_id"': {"label_title": "'"$title"'", "release_year": "'"$release_year"'", "sort_title": "'"$sort_title"'", "url_poster": "", "tpdb_search": "'"$tpdb_search"'"}}' ${{ env.SHOW_METADATA_FILE }}
            yq -i '.metadata |= (to_entries | sort_by(.value.sort_title) | from_entries)' ${{ env.SHOW_METADATA_FILE }}
            yq -i '.metadata.${{ github.event.client_payload.series.tvdbId }}.release_year style="single"' ${{ env.SHOW_METADATA_FILE }}
            yq -i '.metadata.${{ github.event.client_payload.series.tvdbId }}.url_poster style="single"' ${{ env.SHOW_METADATA_FILE }}
            yq ${{ env.SHOW_METADATA_FILE }} # Debug
          fi
          for season in "${seasons[@]}"; do
            if [[ $(yq ".metadata.${{ github.event.client_payload.series.tvdbId }}.seasons.$season" ${{ env.SHOW_METADATA_FILE }}) == null ]]; then
              echo "Season does not exist, adding"
              yq -i '.metadata.${{ github.event.client_payload.series.tvdbId }}.seasons += {'"$season"': {"url_poster": ""}}' ${{ env.SHOW_METADATA_FILE }}
              echo '.metadata.${{ github.event.client_payload.series.tvdbId }}.url_poster.seasons.'"$season"'.url_poster style="single"'
              yq -i '.metadata.${{ github.event.client_payload.series.tvdbId }}.url_poster.seasons.'"$season"'.url_poster style="single"' ${{ env.SHOW_METADATA_FILE }}
              yq ${{ env.SHOW_METADATA_FILE }} # Debug
            fi
          done
          
